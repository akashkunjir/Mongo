1. to find all movies with rating =3
   
   db.movie.find({rating:3}).pretty();
2.to find all mivies with rating =3 and price=340 
    
    db.movie.find({rating:3,price:340},{_id:0,name:1});


3. to find all movies with rating >3 and sort them ratingwise
		db.movie.find({rating:{$gt:3}},{name:1,_id:0}).sort({rating:1});

4. to find all movies with rating >3 and rating < 6
		db.movie.find({rating:{$gt:3,$lt:6}},{name:1,_id:0});

5.to find all movies with rating >3 or rating < 6		
db.movie.find({$or:[{rating:{$gt:3,$lt:6}}]},{name:1,_id:0}); 

7. to find all movies with price = either 200 or 340 or 240
db.movie.find({price:{$in:[250,300,350]}}

8.to find all movies with price is not  either 200 or 340 or 240

db.movie.find({price:{$nin:[200,340,240]}},{_id:0, name:1}).pretty();

9. to find all movies with odd rating 
db.movie.find({rating:{$mod:[2,1]}}).pretty()

10.to find all movies with ticket_no is either 

11.to find all movies in which 3 actors are there in the list
 db.movie.find({actor:{$size:3}},{name:1,actor:1, _id:0}).pretty();

12. find all movies in which Amitabh has acted
db.movie.find({actor:/^[Aa]mitabh/},{name:1,actor:1, _id:0}).pretty();

13. Write a MongoDB query to display all the documents in the collection restaurants
db.restaurent.find().pretty();

14. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant. 
db.restaurent.find({},{_id:1, name:1, borough:1, cuisine:1}).pretty()

15. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant. 
db.restaurent.find({},{_id:0, name:1, borough:1, cuisine:1}).pretty()

16. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant. 
db.restaurent.find({},{_id:0, restaurant_id:1, name:1, borough:1, cuisine:1, "address.zipcode":1}).pretty()

17. Write a MongoDB query to display all the restaurant which is in the borough Bronx
db.restaurent.find({borough:"Bronx"},{_id:0, name:1}).pretty();

18. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx. 
db.restaurent.find({borough:"Bronx"},{_id:0, name:1}).pretty().limit(5);

19.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
db.restaurent.find({borough:"Bronx"},{_id:0, name:1}).pretty().limit(5).skip(5);

20. Write a MongoDB query to find the restaurants who achieved a score more than 90. 
db.restaurent.find({"grades.score":{$gte:90}},{_id:0, name:1}).pretty()

21. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100. 
db.restaurent.find({$and: [{"grades.score":{$gt:80}},{"grades.score":{$lt:100}}]},{_id:0, name:1}).pretty()

22. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
> db.restaurent.find({"address.coord.0":{$lt:-95.754168}},{_id:0, name:1, "address.coord":1}).pretty()

23. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168. 
> db.restaurent.find({$and:[{cuisine:{$ne:'American'}},{"grades.score":{$gt:70}},{"address.coord.0":{$lt:-65.754168}}]}, {_id:0, name:1, "address.coord":1}).pretty();

25. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order. 
> db.restaurent.find({$and: [ {cuisine:{$ne:'American'}},{"grades.grade":'A'},{borough:{$ne: "Brooklyn"}} ] }, {_id:0, name:1}).sort({"cuisine":-1});

26. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
> db.restaurent.find({name:/^Wil.*/}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1,}).pretty().limit(5);

27. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name. 
> db.restaurent.find({name:/^[Cc]es.*/}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1,}).pretty().limit(5);

28. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name. 
> db.restaurent.find({$or: [{name:/.*Reg.*/}, {name:/^*Reg.*/}, {name:/.*Reg$/}]},{_id:0, restaurent_id:1, name: 1, borough: 1, cuisine:1}).pretty().limit(5);

29. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish. 
> db.restaurent.find({$and:[{borough:"Bronx"},{$or: [{cuisine: "American"}, {cuisine: "Chinese"}]}]},{_id:0, restaurent_id:1, name: 1, borough: 1, cuisine:1}).pretty().limit(5);


30. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronx or Brooklyn. 
> db.restaurent.find({$or:[{borough: "Staten Island"}, {borough: "Queens"}, {borough: "Bronx"}, {borough: "Brooklyn"}]},{_id:0, restaurent_id:1, name:1, borough: 1, cuisine: 1}).pretty().limit(5);

31. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronx or Brooklyn. 
> db.restaurent.find( {borough:  {$nin: ["Staten Island", "Queens", "Bronx", "Brooklyn"]}}, {_id:0, restaurent_id:1, name:1, borough: 1, cuisine: 1}).pretty().limit(5);


32. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10. 
> db.restaurents.find({"grades.score":{lte:10}}, {_id:0, restaurent_id:1, name:1, borough: 1, cuisine: 1}).pretty().limit();

> db.restaurent.find({"grades.score":{$lte:10}}, {_id:0, restaurent_id:1, name:1, borough: 1, cuisine: 1, "grades.score":1}).pretty();

33. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinese' or restaurant's name begins with letter 'Wil'. 
> db.restaurent.find({$or: [{name: /^Wil.*/},{cuisine: {$nin: ["American", "Chinese"]}}]},{_id:0, restaurent_id:1, name:1, borough: 1, cuisine: 1}).limit(5);

================================================================================================
34. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates
> db.restaurent.find({$and: [{"grades.grade": 'A'},{"grades.score": 11},{"grades.date": ISODate("2014-08-11T00:00:00Z")}]},{restaurant_id: 1, name: 1, grades: 1}).limit(4).pretty();


 db.restaurent.find({$and: [{"grades.$.grade": 'A'},{"grades.$.score": 11},{"grades.$.date": ISODate("2014-08-11T00:00:00Z")}]},{restaurant_id: 1, name: 1, grades: 1}).limit(4).pretty();

db.restaurent.find({"grades.date": ISODate("2014-08-11T00:00:00Z")},{restaurant_id: 1, name: 1, _id: 0}).pretty().limit(5);


db.restaurent.find({}, {restaurant_id: 1, name: 1, _id:0, "grades.date":1}).pretty().limit(1);

db.restaurent.find({"grades.0.score":10}, {restaurant_id: 1, name: 1, _id:0, "grades.date":1}).pretty().limit(1);
db.restaurent.find({"grades.0.score":10}, {restaurant_id: 1, name: 1, _id:0, "grades" : 1}).pretty().limit(4);




======================================================================================================

35. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate  "2014-08-11T00:00:00Z". 
> db.restaurent.find({$and: [{"grades.1.grade": 'A'},{"grades.1.score": 9},{"grades.1.date": ISODate("2014-08-11T00:00:00Z")}]},{restaurant_id: 1, name: 1, grades: 1}).limit(4).pretty();

======================================================================================================


36. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52

db.restaurent.find({$and: [{'address.coord.1': {$gt: 42}}, {'address.coord.1': {$lt: 52}}]},{restaurant_id: 1, name: 1, _id:0, "address" : 1}).pretty().limit(2);


======================================================================================================

37. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.

db.restaurent.aggregate([{$sort: {name: 1}}])

db.restaurent.find().sort({name: 1}).pretty().limit(1).skip(1500);
======================================================================================================

38. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns. 
> db.restaurent.find().sort({name: -1}).pretty().limit(1)

======================================================================================================
39. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order
> db.restaurent.find().sort({cuisin: 1, borough: -1});

======================================================================================================
40. Write a MongoDB query to know whether all the addresses contains the street or not. 
> db.restaurent.find({"address.street": { $exists: true}});

======================================================================================================
41. Write a MongoDB query which will select all documents in the restaurants collection 
where the coord field value is Double. 

db.addressBook.find( { "zipCode" : { $type : "double" } } )

9

